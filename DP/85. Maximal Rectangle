class Solution {
    int area(int []heights){
        Stack<Integer> s=new Stack<>();
        int []p=new int[heights.length];
        int []n=new int[heights.length];
        int a=0,b=heights.length-1,max=0,ar=0;
        for(int i=0;i<heights.length;i++){
            while(!s.isEmpty()&&heights[s.peek()]>=heights[i]){
                s.pop();
            }
            if(s.isEmpty()){
                p[a++]=-1;
            }
            else{
                p[a++]=s.peek();
            }
            s.push(i);
        }
        while(!s.isEmpty()){
                s.pop();
            }
        for(int i=heights.length-1;i>=0;i--){
            while(!s.isEmpty()&&heights[s.peek()]>=heights[i]){
                s.pop();
            }
            if(s.isEmpty()){
                n[b--]=heights.length;
            }
            else{
                n[b--]=s.peek();
            }
            s.push(i);
        }
        for(int i=0;i<heights.length;i++){
            ar=(n[i]-p[i]-1)*heights[i];
            if(max<ar){
                max=ar;
            }
        }
        return max;
    }
    public int maximalRectangle(char[][] matrix) {
        int []a=new int[matrix[0].length];
        int ar=0,mx=0,ch;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                ch=Character.getNumericValue(matrix[i][j]);
                if(ch!=0){
                    a[j]+=ch;
                }
                else
                    a[j]=0;
            }
            ar=area(a);
                if(mx<ar)
                    mx=ar;
        }
        return mx;
    }
}
