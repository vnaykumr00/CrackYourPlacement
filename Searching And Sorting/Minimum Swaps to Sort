class Solution
{
    //Function to find the minimum number of swaps required to sort the array.
    static void merge(int[] arr,int i,int j,int m){
        int n1=m-i+1,n2=j-m;
        int[] arr1=new int[n1];
        int[] arr2=new int[n2];
        int i1=0;
        for(int k=i;k<=m;k++) arr1[i1++]=arr[k];
        i1=0;
        for(int k=m+1;k<=j;k++) arr2[i1++]=arr[k];
        int k=i;
        i1=0;
        int i2=0;
        while(i1<n1&&i2<n2){
            if(arr1[i1]<arr2[i2]){
                arr[k]=arr1[i1++];
            }
            else{
                arr[k]=arr2[i2++];
            }
            k++;
        }
        while(i1<n1){
            arr[k++]=arr1[i1++];
        }
        while(i2<n2){
            arr[k++]=arr2[i2++];
        }
    }
    static void ms(int i,int j,int[] arr){
        if(i>=j) return;
        int m=(i+j)/2;
        ms(i,m,arr);
        ms(m+1,j,arr);
        merge(arr,i,j,m);
    }
    public int minSwaps(int nums[])
    {
        // Code here
        int n=nums.length;
        HashMap<Integer,Integer> mp=new HashMap<Integer,Integer>();
        for(int i=0;i<n;i++) mp.put(nums[i],i);
        ms(0,n-1,nums);
        int ans=0;
        for(int i=0;i<n;i++){
            if(i==mp.get(nums[i])) continue;
            int k=mp.get(nums[i]);
            int tp=nums[k];
            nums[k]=nums[i];
            nums[i]=tp;
            i--;
            ans++;
        }
        return ans;
    }
}

