class Solution {
    class Pair{
        int first;
        int second;
        public Pair(int f,int s){
            first=f;
            second=s;
        }
    }
    class Tuple{
        int stops;
        int nodes;
        int dist;
        public Tuple(int s,int n,int d){
            stops=s;
            nodes=n;
            dist=d;
        }
    }
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
         ArrayList<ArrayList<Pair>> adj= new ArrayList<>();
         for(int i=0;i<n;i++){
             adj.add(new ArrayList<Pair>());
         }
        int m=flights.length;
         for(int i=0;i<m;i++){
            adj.get(flights[i][0]).add(new Pair(flights[i][1],flights[i][2]));
         }
         Queue<Tuple> q= new LinkedList<>();
         int[] distt= new int[n];
         Arrays.fill(distt,(int)1e9);
         q.add(new Tuple(0,src,0));
         while(!q.isEmpty()){
             Tuple it=q.peek();
             q.poll();
             int stop=it.stops;
             int node=it.nodes;
             int dis=it.dist;
             if(stop>k)
                continue;
            for(Pair curr:adj.get(node)){
                int currNode =curr.first;
                int edW=curr.second;
                if(dis+edW<distt[currNode]){
                    distt[currNode]=dis+edW;
                    q.add(new Tuple(stop+1,currNode,dis+edW));
                }
            }
         }
         return (distt[dst]==(int)1e9)?-1:distt[dst];
    }
}
