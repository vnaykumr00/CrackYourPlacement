class Solution{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid){
        
        int n = grid.length;
        int m = grid[0].length;

        // queue stores pairs of (row, col) and an additional integer (e.g., time or distance)
        Queue<Triple> q = new LinkedList<>();
        int[][] vis = new int[n][m];
        int cntFresh =0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.add(new Triple(i, j, 0));
                    vis[i][j] = 2;
                } else {
                    vis[i][j] = 0;
                }
                
                if(grid[i][j] == 1){
                    cntFresh++;
                }
            }
        }
        
        int tm = 0;
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        int cnt = 0;
        
        while(!q.isEmpty()){
             Triple current = q.poll();  // Dequeue the front element
            int r = current.r;
            int c = current.c;
            int t = current.t;
            
            tm =Math.max(tm,t);
            
            for(int i=0;i<4;i++){
                int nrow = r + drow[i];
                int ncol = c + dcol[i];
                
                // Check bounds and if the cell is not visited
                if(nrow >= 0 && nrow < n && ncol >=0 && ncol < m && 
                vis[nrow][ncol] != 2 && grid[nrow][ncol] == 1 ){
                    // Mark as visited and enqueue the new cell
                    vis[nrow][ncol] = 2;
                    q.add(new Triple(nrow, ncol, t + 1));
                    cnt++;
                }
            }
        }
        
        if(cnt != cntFresh) return -1;
        
        return tm;

        
    }
}

class Triple {
    int r, c, t;

    public Triple(int r, int c, int t) {
        this.r = r;
        this.c = c;
        this.t = t;
    }
}

